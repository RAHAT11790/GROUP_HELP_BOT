import logging
import json
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from telegram.constants import ParseMode

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ржбрж╛ржЯрж╛ ржлрж╛ржЗрж▓рзЗрж░ ржирж╛ржо
FILTER_FILE = "filters_data.json"
PHOTO_FILE = "photo_data.json"
ADMIN_FILE = "admin_data.json"

# ------------------- рж╣рзЗрж▓рзНржкрж╛рж░ ржлрж╛ржВрж╢ржи -------------------

def load_json(file, default):
    if os.path.exists(file):
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ------------------- ржбрж╛ржЯрж╛ рж▓рзЛржб -------------------

keyword_store = load_json(FILTER_FILE, {})
photo_store = load_json(PHOTO_FILE, {})
ADMIN_IDS = load_json(ADMIN_FILE, [6621572366])  # ржбрж┐ржлрж▓рзНржЯ ржПржбржорж┐ржи

# ------------------- ржмржЯ рж╕рзЗржЯржЖржк -------------------

BOT_TOKEN = "8437757573:AAHz-hT0E6pzIzJpkL3rtzLVR5oihqsbWhk"

WELCOME_TEMPLATE = """ЁЯОЙ ЁЭС╛ЁЭТЖЁЭТНЁЭТДЁЭТРЁЭТОЁЭТЖ ЁЭТХЁЭТР ЁУЖй{mention}ЁУЖк ЁЯОЙ

ЁЯТл Watch every twist, every turn тАФ
ЁЯФУ 100% FREE
ЁЯЧгя╕П Now with Hindi Dubbing
ЁЯУЪ All Seasons тАв All Episodes
ЁЯТО Join:@CARTOONFUNNY03
"""

photo_temp = {}

def is_admin(user_id):
    return user_id in ADMIN_IDS

# ------------------- ржХржорж╛ржирзНржб -------------------

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ Anime Keyword Bot!\n\n"
        "ржПржХрж╕рж╛ржерзЗ ржЕржирзЗржХржЧрзБрж▓рзЛ ржХрзАржУржпрж╝рж╛рж░рзНржб ржпрзЛржЧ ржХрж░рждрзЗ:\n"
        "/rs\n"
        "[Naruto] https://link1\n"
        "[Attack on Titan] https://link2\n"
        "[One Piece, OP] https://link3\n\n"
        "ЁЯУ╕ /photo - ржлржЯрзЛ ржмрж╛ GIF рж╕рзЗржЯ ржХрж░рждрзЗ\n"
        "ЁЯСС /addadmin user_id - ржирждрзБржи ржПржбржорж┐ржи ржЕрзНржпрж╛ржб ржХрж░рждрзЗ"
    )

# тЬЕ ржПржХрж╕рж╛ржерзЗ ржЕржирзЗржХ ржХрзАржУржпрж╝рж╛рж░рзНржб ржпрзЛржЧ
async def set_filter(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)

    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return

    text = update.message.text.split("\n", 1)
    if len(text) < 2:
        await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░:\n/rs\n[Keyword] рж▓рж┐ржВржХ\n[Another] рж▓рж┐ржВржХ")
        return

    multi_lines = text[1].strip().split("\n")
    if chat_id not in keyword_store:
        keyword_store[chat_id] = {}

    added_count = 0
    for line in multi_lines:
        match = re.search(r"\[(.*?)\]\s+(https?://\S+)", line)
        if not match:
            continue

        keywords = [k.strip().lower() for k in match.group(1).split(",") if k.strip()]
        link = match.group(2).strip()

        for kw in keywords:
            keyword_store[chat_id][kw] = link
            added_count += 1

    save_json(FILTER_FILE, keyword_store)
    await update.message.reply_text(f"тЬЕ ржорзЛржЯ {added_count} ржХрзАржУржпрж╝рж╛рж░рзНржб рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗ (рж╕рзНржерж╛ржпрж╝рзАржнрж╛ржмрзЗ)!")

# тЬЕ ржЯрзЗржХрзНрж╕ржЯ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def handle_message(update: Update, context: CallbackContext):
    message = update.message
    chat_id = str(message.chat_id)
    text = message.text.lower() if message.text else ""

    if chat_id in keyword_store:
        for keyword, link in keyword_store[chat_id].items():
            if keyword in text:
                mention = message.from_user.mention_markdown()
                msg = WELCOME_TEMPLATE.format(mention=mention)
                buttons = [[InlineKeyboardButton("ЁЯУе WATCH & DOWNLOAD ЁЯУе", url=link)]]
                markup = InlineKeyboardMarkup(buttons)

                if chat_id in photo_store and photo_store[chat_id]:
                    info = photo_store[chat_id]
                    if info["type"] == "gif":
                        await message.reply_animation(animation=info["file_id"], caption=msg, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
                    else:
                        await message.reply_photo(photo=info["file_id"], caption=msg, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
                else:
                    await message.reply_text(msg, reply_markup=markup, parse_mode=ParseMode.MARKDOWN)
                break

# тЬЕ ржХрзАржУржпрж╝рж╛рж░рзНржб рж▓рж┐рж╕рзНржЯ
async def list_keywords(update: Update, context: CallbackContext):
    chat_id = str(update.effective_chat.id)
    if chat_id in keyword_store and keyword_store[chat_id]:
        msg = "ЁЯОм **ржХрзАржУржпрж╝рж╛рж░рзНржб рж▓рж┐рж╕рзНржЯ:**\n"
        for k, v in keyword_store[chat_id].items():
            msg += f"тАв `{k}` тЖТ {v}\n"
        await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("тЭМ ржХрзЛржирзЛ ржХрзАржУржпрж╝рж╛рж░рзНржб рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

# тЬЕ ржХрзАржУржпрж╝рж╛рж░рзНржб ржбрж┐рж▓рж┐ржЯ
async def delete_filter(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)

    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return

    if len(context.args) < 1:
        await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /delfilter keyword")
        return

    kw = context.args[0].lower()
    if chat_id in keyword_store and kw in keyword_store[chat_id]:
        del keyword_store[chat_id][kw]
        save_json(FILTER_FILE, keyword_store)
        await update.message.reply_text(f"тЬЕ '{kw}' ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
    else:
        await update.message.reply_text("тЭМ ржХрзАржУржпрж╝рж╛рж░рзНржбржЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")

# тЬЕ рж╕ржм ржлрж┐рж▓рзНржЯрж╛рж░ ржХрзНрж▓рж┐ржпрж╝рж╛рж░
async def clear_filters(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)
    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return

    count = len(keyword_store.get(chat_id, {}))
    keyword_store[chat_id] = {}
    save_json(FILTER_FILE, keyword_store)
    await update.message.reply_text(f"тЬЕ рж╕ржм ржлрж┐рж▓рзНржЯрж╛рж░ ржбрж┐рж▓рж┐ржЯ рж╣ржпрж╝рзЗржЫрзЗ! ржорзЛржЯ: {count}")

# тЬЕ ржлржЯрзЛ рж╕рзЗржЯ
async def set_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)
    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return
    await update.message.reply_text("ЁЯУ╕ ржПржЦржи ржПржХржЯрж┐ ржлржЯрзЛ ржмрж╛ GIF ржкрж╛ржарж╛ржи...")
    photo_temp[user_id] = {"chat_id": chat_id, "waiting": True}

# тЬЕ ржлржЯрзЛ рж░рж┐рж╕рж┐ржн
async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)

    if user_id in photo_temp and photo_temp[user_id]["waiting"]:
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            photo_store[chat_id] = {"file_id": file_id, "type": "photo"}
        elif update.message.animation:
            file_id = update.message.animation.file_id
            photo_store[chat_id] = {"file_id": file_id, "type": "gif"}
        else:
            await update.message.reply_text("тЭМ ржлржЯрзЛ ржмрж╛ GIF ржжрж┐ржиред")
            return

        save_json(PHOTO_FILE, photo_store)
        await update.message.reply_text("тЬЕ ржлржЯрзЛ/GIF рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗ (рж╕рзНржерж╛ржпрж╝рзАржнрж╛ржмрзЗ)!")
        del photo_temp[user_id]

# тЬЕ ржлржЯрзЛ рж░рж┐ржорзБржн
async def remove_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)
    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return
    if chat_id in photo_store:
        del photo_store[chat_id]
        save_json(PHOTO_FILE, photo_store)
        await update.message.reply_text("тЬЕ ржлржЯрзЛ/GIF рж░рж┐ржорзБржн рж╣ржпрж╝рзЗржЫрзЗ!")
    else:
        await update.message.reply_text("тЭМ ржХрзЛржирзЛ ржлржЯрзЛ рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред")

# тЬЕ ржирждрзБржи ржПржбржорж┐ржи ржпрзЛржЧ
async def add_admin(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("тЭМ ржЖржкржирж┐ ржПржбржорж┐ржи ржиржи!")
        return

    if len(context.args) < 1:
        await update.message.reply_text("ржмрзНржпржмрж╣рж╛рж░: /addadmin user_id")
        return

    try:
        new_admin = int(context.args[0])
        if new_admin not in ADMIN_IDS:
            ADMIN_IDS.append(new_admin)
            save_json(ADMIN_FILE, ADMIN_IDS)
            await update.message.reply_text(f"тЬЕ ржирждрзБржи ржПржбржорж┐ржи ржЕрзНржпрж╛ржб рж╣ржпрж╝рзЗржЫрзЗ: {new_admin}")
        else:
            await update.message.reply_text("тЭМ ржПржЗ ржЗржЙржЬрж╛рж░ ржЗрждрж┐ржоржзрзНржпрзЗржЗ ржПржбржорж┐ржиред")
    except ValueError:
        await update.message.reply_text("тЭМ рж╕ржарж┐ржХ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржиред")

# ------------------- ржмржЯ рж░рж╛ржи -------------------

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rs", set_filter))
    app.add_handler(CommandHandler("list", list_keywords))
    app.add_handler(CommandHandler("delfilter", delete_filter))
    app.add_handler(CommandHandler("clear", clear_filters))
    app.add_handler(CommandHandler("photo", set_photo))
    app.add_handler(CommandHandler("removephoto", remove_photo))
    app.add_handler(CommandHandler("addadmin", add_admin))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO | filters.ANIMATION, handle_photo))

    print("тЬЕ Bot ржЪрж▓ржЫрзЗ... (рж╕рзНржерж╛ржпрж╝рзА ржбрзЗржЯрж╛ рж╕рж┐рж╕рзНржЯрзЗржо рж╕ржХрзНрж░рж┐ржпрж╝)")
    app.run_polling()

if __name__ == "__main__":
    main()
