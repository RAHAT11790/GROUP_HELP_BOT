import logging
import json
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from telegram.constants import ParseMode
import re
from flask import Flask
from threading import Thread

# Flask app for Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® - Unbuffered for Render
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ
KEYWORD_DATA_FILE = "keyword_data.json"
PHOTO_DATA_FILE = "photo_data.json"
ADMIN_DATA_FILE = "admin_data.json"

# Environment variables from Render - Token must be set, no fallback
BOT_TOKEN = os.environ['BOT_TOKEN']
ADMIN_IDS = [int(x.strip()) for x in os.environ.get('ADMIN_IDS', '6621572366,-1002892874648').split(',')]

# ‡¶´‡¶ü‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú
photo_temp = {}
bulk_temp = {}

# ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def is_admin(update: Update):
    user_id = update.effective_user.id
    
    # ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡¶Ø‡¶º ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶•‡ßá‡¶ï‡ßá
    if update.message and update.message.forward_from_chat:
        forwarded_chat_id = update.message.forward_from_chat.id
        if forwarded_chat_id in ADMIN_IDS:
            return True
    
    # ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    return user_id in ADMIN_IDS

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def load_data():
    keyword_store = {}
    photo_store = {}
    
    try:
        if os.path.exists(KEYWORD_DATA_FILE):
            with open(KEYWORD_DATA_FILE, 'r', encoding='utf-8') as f:
                keyword_store = json.load(f)
    except Exception as e:
        logger.error(f"Keyword data load error: {e}")
    
    try:
        if os.path.exists(PHOTO_DATA_FILE):
            with open(PHOTO_DATA_FILE, 'r', encoding='utf-8') as f:
                photo_store = json.load(f)
    except Exception as e:
        logger.error(f"Photo data load error: {e}")
    
    # Load admins from file if exists, merge with env
    try:
        if os.path.exists(ADMIN_DATA_FILE):
            with open(ADMIN_DATA_FILE, 'r') as f:
                file_admins = json.load(f)
                ADMIN_IDS.extend(file_admins)
                ADMIN_IDS = list(set(ADMIN_IDS))  # Dedupe
    except Exception as e:
        logger.error(f"Admin data load error: {e}")
    
    return keyword_store, photo_store

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def save_data(keyword_store, photo_store):
    try:
        with open(KEYWORD_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(keyword_store, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Keyword data save error: {e}")
    
    try:
        with open(PHOTO_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(photo_store, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Photo data save error: {e}")
    
    # Save admins
    try:
        with open(ADMIN_DATA_FILE, 'w') as f:
            json.dump(ADMIN_IDS, f)
    except Exception as e:
        logger.error(f"Admin data save error: {e}")

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
keyword_store, photo_store = load_data()

# ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü
WELCOME_TEMPLATE = """üéâ ùëæùíÜùíçùíÑùíêùíéùíÜ ùíïùíê ìÜ©{mention}ìÜ™, ùíïùíâùíÜ ùíñùíçùíïùíäùíéùíÇùíïùíÜ ùíâùíñùíÉ ùíáùíêùíì ùíÇùíçùíç ùíÇùíèùíäùíéùíÜ ùíçùíêùíóùíÜùíìùíî! üéâ

üí´ Watch every twist, every turn ‚Äî
üîì 100% FREE
üó£Ô∏è Now with Hindi Dubbing
üé¨ ùíäùíá ùíöùíêùíñ ùíáùíäùíèùíÖ ùíÇùíèùíö ùíÇùíèùíäùíéùíÜ ùíïùíöùíëùíÜ ùíèùíÇùíéùíÜ ùíêùíèùíçùíö¬† 

üçø ùëØùíÇùíëùíëùíö ùëæùíÇùíïùíÑùíâùíäùíèùíà!
‚¨áÔ∏èùëêùëôùëñùëêùëò ùë°‚Ñéùëñùë† ùëèùë¢ùë°ùë°ùëúùëõ‚¨áÔ∏è"""

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        '‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶¨‡¶ü\n\n'
        '‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü:\n'
        'start - Bot activ check kore\n'
        'rs - Ekta keyword set kore [keyword] link\n'
        'md - Bulk keyword add kore\n'
        'list - Shudhu keyword list dekhao\n'
        'delfilter - Ekta keyword delete koro\n'
        'clear - Shob keyword delete koro\n'
        'photo - Photo/GIF set koro (dui step e)\n'
        'removephoto - Photo/GIF remove koro\n'
        'addadmin - Notun admin add koro\n'
        'admins - Shob admin der list dekhao'
    )

async def set_filter(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®! ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text('‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /rs [keyword1,keyword2] ‡¶≤‡¶ø‡¶Ç‡¶ï')
        return
    
    # ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    args_text = ' '.join(context.args)
    bracket_match = re.search(r'\[(.*?)\]', args_text)
    
    if not bracket_match:
        await update.message.reply_text('‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /rs [keyword1,keyword2] ‡¶≤‡¶ø‡¶Ç‡¶ï\n‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®')
        return
    
    keywords_text = bracket_match.group(1)
    link = args_text[bracket_match.end():].strip()
    
    if not link:
        await update.message.reply_text('‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /rs [keyword1,keyword2] ‡¶≤‡¶ø‡¶Ç‡¶ï')
        return
    
    # ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶æ
    keywords = [kw.strip() for kw in keywords_text.split(',') if kw.strip()]
    
    if not keywords:
        await update.message.reply_text('‡¶ï‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶®\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /rs [movie,cinema,film] ‡¶≤‡¶ø‡¶Ç‡¶ï')
        return
    
    chat_id = update.effective_chat.id
    
    # ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    if str(chat_id) not in keyword_store:
        keyword_store[str(chat_id)] = {}
    
    added_keywords = []
    for keyword in keywords:
        keyword_store[str(chat_id)][keyword] = link
        added_keywords.append(keyword)
    
    # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
    save_data(keyword_store, photo_store)
    
    keyword_list = ", ".join(added_keywords)
    await update.message.reply_text(f'‚úÖ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°: {keyword_list}\n‡¶≤‡¶ø‡¶Ç‡¶ï: {link}')

async def bulk_add_keywords(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®! ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    await update.message.reply_text(
        "üìù **‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶°**\n\n"
        "‡¶è‡¶ñ‡¶® ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        "```\n"
        "md [keyword1,keyword2] link1\n"
        "md [keyword3,keyword4] link2\n"
        "md [keyword5] link3\n"
        "```\n\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n"
        "```\n"
        "md [Naruto,Anime] https://t.me/link1\n"
        "md [One Piece] https://t.me/link2\n"
        "md [Dragon Ball,DBZ] https://t.me/link3\n"
        "```\n\n"
        "üí° **‡¶®‡ßã‡¶ü:** ‡¶∂‡ßÅ‡¶ß‡ßÅ `md` ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, `/md` ‡¶®‡ßü!"
    )
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶Æ‡ßã‡¶°‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    bulk_temp[user_id] = {'chat_id': chat_id, 'waiting_for_bulk': True}

async def handle_bulk_message(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶õ‡ßá
    if user_id in bulk_temp and bulk_temp[user_id]['waiting_for_bulk']:
        
        if not update.message.text:
            await update.message.reply_text("‚ùå ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®")
            return
        
        message_text = update.message.text
        lines = message_text.split('\n')
        
        added_count = 0
        errors = []
        
        for line in lines:
            line = line.strip()
            if line.startswith('md '):
                try:
                    # md ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶® - improved parsing
                    parts = line.split(' ', 2)  # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 2 spaces ‡¶è split
                    if len(parts) >= 3:
                        bracket_content = parts[1]
                        link = parts[2].strip()
                        
                        # ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                        bracket_match = re.search(r'\[(.*?)\]', bracket_content)
                        if bracket_match and link:
                            keywords_text = bracket_match.group(1)
                            keywords = [kw.strip() for kw in keywords_text.split(',') if kw.strip()]
                            
                            if keywords and link:
                                # ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
                                if str(chat_id) not in keyword_store:
                                    keyword_store[str(chat_id)] = {}
                                
                                for keyword in keywords:
                                    keyword_store[str(chat_id)][keyword] = link
                                    added_count += 1
                            else:
                                errors.append(f"‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡ßá‡¶á: {line}")
                        else:
                            errors.append(f"‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶≠‡ßÅ‡¶≤: {line}")
                    else:
                        errors.append(f"‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: {line}")
                except Exception as e:
                    errors.append(f"‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶Ç error: {line} - {str(e)}")
            elif line.strip() and not line.startswith('md '):
                errors.append(f"‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: {line} - 'md' ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®")
        
        # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        save_data(keyword_store, photo_store)
        
        response = f"‚úÖ ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶è‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£!\n\n‡¶è‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {added_count} ‡¶ü‡¶ø ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°"
        if errors:
            response += f"\n\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({len(errors)} ‡¶ü‡¶ø):\n" + "\n".join(errors[:5])
        
        await update.message.reply_text(response)
        
        # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        del bulk_temp[user_id]

async def handle_message(update: Update, context: CallbackContext) -> None:
    # ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶Æ‡ßã‡¶°‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶¨‡ßá
    user_id = update.effective_user.id
    if user_id in bulk_temp and bulk_temp[user_id]['waiting_for_bulk']:
        await handle_bulk_message(update, context)
        return
    
    message = update.message
    chat_id = message.chat_id
    text = message.text if message.text else ''
    
    if str(chat_id) in keyword_store:
        for keyword, link in keyword_store[str(chat_id)].items():
            # Case insensitive search
            if keyword.lower() in text.lower():
                logger.info(f"Keyword match: {keyword} for chat {chat_id}")
                # mention ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                mention = message.from_user.mention_markdown()
                
                # ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                welcome_message = WELCOME_TEMPLATE.format(mention=mention)
                
                # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                keyboard = [
                    [InlineKeyboardButton("üì• WATCH AND DOWNLOAD üì•", url=link)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # ‡¶´‡¶ü‡ßã ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
                if str(chat_id) in photo_store and photo_store[str(chat_id)]:
                    try:
                        # ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø GIF ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ‡¶ï‡¶ø ‡¶´‡¶ü‡ßã
                        if photo_store[str(chat_id)].get('type') == 'gif':
                            await message.reply_animation(
                                animation=photo_store[str(chat_id)]['file_id'],
                                caption=welcome_message,
                                reply_markup=reply_markup,
                                parse_mode=ParseMode.MARKDOWN
                            )
                        else:
                            await message.reply_photo(
                                photo=photo_store[str(chat_id)]['file_id'],
                                caption=welcome_message,
                                reply_markup=reply_markup,
                                parse_mode=ParseMode.MARKDOWN
                            )
                    except Exception as e:
                        logger.error(f"Media reply error: {e}")
                        # ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶ü‡ßã/GIF ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
                        await message.reply_text(
                            welcome_message,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.MARKDOWN
                        )
                else:
                    await message.reply_text(
                        welcome_message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
                break

async def list_keywords(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    
    if str(chat_id) in keyword_store and keyword_store[str(chat_id)]:
        keywords_list = []
        for keyword in keyword_store[str(chat_id)].keys():
            keywords_list.append(f"‚Ä¢ `{keyword}`")
        
        response_text = "üé¨ **‡¶∏‡¶ï‡¶≤ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:**\n" + "\n".join(keywords_list)
        await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")

async def delete_filter(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text('‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /delfilter keyword')
        return
    
    # ‡¶™‡ßÅ‡¶∞‡ßã keyword ‡¶ü‡¶ø ‡¶®‡¶ø‡¶® (case insensitive)
    keyword_input = ' '.join(context.args)
    chat_id = update.effective_chat.id
    
    if str(chat_id) in keyword_store and keyword_store[str(chat_id)]:
        # ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡ßÄ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (case insensitive search)
        found_keyword = None
        for existing_keyword in keyword_store[str(chat_id)].keys():
            if existing_keyword.lower() == keyword_input.lower():
                found_keyword = existing_keyword
                break
        
        if found_keyword:
            # ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® (‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶®‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
            link = keyword_store[str(chat_id)][found_keyword]
            del keyword_store[str(chat_id)][found_keyword]
            # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
            save_data(keyword_store, photo_store)
            await update.message.reply_text(
                f'‚úÖ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n'
                f'‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°: {found_keyword}\n'
                f'‡¶≤‡¶ø‡¶Ç‡¶ï: {link}'
            )
        else:
            await update.message.reply_text('‚ùå ‡¶è‡¶á ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§')
    else:
        await update.message.reply_text('‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§')

async def clear_filters(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    chat_id = update.effective_chat.id
    
    if str(chat_id) in keyword_store:
        keyword_count = len(keyword_store[str(chat_id)])
        keyword_store[str(chat_id)] = {}
        # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        save_data(keyword_store, photo_store)
        await update.message.reply_text(f'‚úÖ ‡¶∏‡¶¨ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü: {keyword_count}')
    else:
        await update.message.reply_text('‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§')

async def set_photo(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶´‡¶ü‡ßã/GIF ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®
    await update.message.reply_text("üì∏ ‡¶è‡¶ñ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶ü‡ßã ‡¶¨‡¶æ GIF ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®...")
    photo_temp[user_id] = {'chat_id': chat_id, 'waiting_for_photo': True}

async def handle_photo(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶´‡¶ü‡ßã/GIF ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶õ‡ßá
    if user_id in photo_temp and photo_temp[user_id]['waiting_for_photo']:
        
        if update.message.photo:
            # ‡¶´‡¶ü‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            photo_file = update.message.photo[-1].file_id
            photo_store[str(chat_id)] = {'file_id': photo_file, 'type': 'photo'}
            await update.message.reply_text("‚úÖ ‡¶´‡¶ü‡ßã ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶è‡¶á ‡¶´‡¶ü‡ßã ‡¶∏‡¶π ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§")
        
        elif update.message.animation:
            # GIF ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            gif_file = update.message.animation.file_id
            photo_store[str(chat_id)] = {'file_id': gif_file, 'type': 'gif'}
            await update.message.reply_text("‚úÖ GIF ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶è‡¶á GIF ‡¶∏‡¶π ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§")
        
        else:
            await update.message.reply_text("‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶ü‡ßã ‡¶¨‡¶æ GIF ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        
        # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        save_data(keyword_store, photo_store)
        
        # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        del photo_temp[user_id]

async def remove_photo(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    chat_id = update.effective_chat.id
    
    if str(chat_id) in photo_store:
        del photo_store[str(chat_id)]
        # ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
        save_data(keyword_store, photo_store)
        await update.message.reply_text("‚úÖ ‡¶´‡¶ü‡ßã/GIF ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
    else:
        await update.message.reply_text("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶ü‡ßã/GIF ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")

async def add_admin(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text('‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /addadmin user_id')
        return
    
    try:
        new_admin_id = int(context.args[0])
        if new_admin_id not in ADMIN_IDS:
            ADMIN_IDS.append(new_admin_id)
            save_data(keyword_store, photo_store)  # Saves admins too
            await update.message.reply_text(f'‚úÖ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! User ID: {new_admin_id}')
        else:
            await update.message.reply_text('‚ùå ‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶°‡¶Æ‡¶ø‡¶®!')
    except ValueError:
        await update.message.reply_text('‚ùå ‡¶∏‡¶†‡¶ø‡¶ï User ID ‡¶¶‡¶ø‡¶® (‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)')

async def show_admins(update: Update, context: CallbackContext) -> None:
    # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï
    if not is_admin(update):
        await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®!")
        return
    
    admin_list = "\n".join([f"‚Ä¢ `{admin_id}`" for admin_id in ADMIN_IDS])
    await update.message.reply_text(f"üëë **‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ:**\n{admin_list}", parse_mode=ParseMode.MARKDOWN)

def main() -> None:
    # Flask server start in separate thread
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("rs", set_filter))  # ‡¶è‡¶ï‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶ü
        application.add_handler(CommandHandler("md", bulk_add_keywords))  # ‡¶¨‡¶æ‡¶≤‡ßç‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶è‡¶°
        application.add_handler(CommandHandler("list", list_keywords))  # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
        application.add_handler(CommandHandler("delfilter", delete_filter))  # ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)
        application.add_handler(CommandHandler("clear", clear_filters))  # ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)
        application.add_handler(CommandHandler("photo", set_photo))  # ‡¶´‡¶ü‡ßã ‡¶∏‡ßá‡¶ü (‡¶è‡¶°‡¶Æ‡¶ø‡¶®) - ‡¶¶‡ßÅ‡¶á ‡¶ß‡¶æ‡¶™‡ßá
        application.add_handler(CommandHandler("removephoto", remove_photo))  # ‡¶´‡¶ü‡ßã ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)
        application.add_handler(CommandHandler("addadmin", add_admin))  # ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)
        application.add_handler(CommandHandler("admins", show_admins))  # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)
        
        # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # ‡¶´‡¶ü‡ßã ‡¶è‡¶¨‡¶Ç GIF ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_handler(MessageHandler(filters.PHOTO | filters.ANIMATION, handle_photo))

        logger.info("Bot handlers added successfully")
        print("‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except AttributeError as e:
        if '_polling_cleanup_cb' in str(e):
            logger.error("PTB Updater error‚Äîupgrade python-telegram-bot to >=22.5 for Python 3.13 compat.")
        raise
    except Exception as e:
        logger.error(f"Bot startup failed: {e}")
        raise

if __name__ == '__main__':
    main()
